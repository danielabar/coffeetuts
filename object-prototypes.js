// Generated by CoffeeScript 1.7.1

/*
// JavaScript Refresher: Constructor Function
//  Feature 1: No return statement
//  Feature 2: 'this' keyword refers to new Dog object

// These features come as result of using 'new' keyword
// By convention, capitalize constructor function names so people
//  know its not a regular function, but should be called with 'new'

function Dog (name) {
  this.name = name;
}

// Give Dog instances a growl method
// Every new instance of Dog object has access to methods defined
//  on its prototype
Dog.prototype.growl = function() {
  console.log("growl");
}

// Create a Dog and growl
var myDog = new Dog("Fido")
myDog.growl();
 */

(function() {
  var BorderCollie, Dog, d, smartFido,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Dog = function(name) {
    this.name = name;
  };

  Dog.prototype.growl = function() {
    return console.log("*growl*");
  };

  d = new Dog("Rusty");

  console.dir(d.name);

  d.growl();

  BorderCollie = function(name, tricks) {
    this.name = name;
    this.tricks = tricks;
  };

  __extends(BorderCollie, Dog);

  BorderCollie.prototype.perform = function(trick) {
    if (__indexOf.call(this.tricks, trick) >= 0) {
      return console.log("" + this.name + " is " + trick);
    } else {
      return console.log("*whine*");
    }
  };

  smartFido = new BorderCollie("Fido", ["playing dead", "catching frisbee", "rolling over"]);

  smartFido.perform("playing dead");

  smartFido.perform("staying");

  smartFido.growl();

}).call(this);
